<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ydderf&#39;s blog</title>
    <link>https://blog.ydderf.dev/posts/</link>
    <description>Recent content in Posts on ydderf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ydderf.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Portable Executable Format</title>
      <link>https://blog.ydderf.dev/posts/portable-executable-format/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ydderf.dev/posts/portable-executable-format/</guid>
      <description>&lt;h3 id=&#34;pe-file-extensions&#34;&gt;PE File Extensions&lt;/h3&gt;
&lt;p&gt;The following is the list of PE file extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.exe&lt;/code&gt; - run directly by the user, contains the main entry point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dll&lt;/code&gt; - dynamic-link library that can be used by multiple programs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sys&lt;/code&gt; - device drivers or low-level system components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.scr&lt;/code&gt; - screen saver files, run by the system when the screen saver is activated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pe-structure&#34;&gt;PE Structure&lt;/h3&gt;
&lt;p&gt;The structure contains the following sections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[[#DOS Header]]&lt;/li&gt;
&lt;li&gt;[[#DOS Stub]]&lt;/li&gt;
&lt;li&gt;[[#NT Headers]]
&lt;ul&gt;
&lt;li&gt;NT Signature&lt;/li&gt;
&lt;li&gt;File Header&lt;/li&gt;
&lt;li&gt;Optional Header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[#Data Directories]]&lt;/li&gt;
&lt;li&gt;[[#Sections]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dos-header&#34;&gt;DOS Header&lt;/h3&gt;
&lt;p&gt;At the start of PE files, always prefixed with two bytes, &lt;code&gt;0x4D&lt;/code&gt; and &lt;code&gt;0x5A&lt;/code&gt;, or &lt;code&gt;MZ&lt;/code&gt; in ASCII.&lt;/p&gt;</description>
      <content>&lt;h3 id=&#34;pe-file-extensions&#34;&gt;PE File Extensions&lt;/h3&gt;
&lt;p&gt;The following is the list of PE file extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.exe&lt;/code&gt; - run directly by the user, contains the main entry point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dll&lt;/code&gt; - dynamic-link library that can be used by multiple programs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sys&lt;/code&gt; - device drivers or low-level system components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.scr&lt;/code&gt; - screen saver files, run by the system when the screen saver is activated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pe-structure&#34;&gt;PE Structure&lt;/h3&gt;
&lt;p&gt;The structure contains the following sections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[[#DOS Header]]&lt;/li&gt;
&lt;li&gt;[[#DOS Stub]]&lt;/li&gt;
&lt;li&gt;[[#NT Headers]]
&lt;ul&gt;
&lt;li&gt;NT Signature&lt;/li&gt;
&lt;li&gt;File Header&lt;/li&gt;
&lt;li&gt;Optional Header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[#Data Directories]]&lt;/li&gt;
&lt;li&gt;[[#Sections]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dos-header&#34;&gt;DOS Header&lt;/h3&gt;
&lt;p&gt;At the start of PE files, always prefixed with two bytes, &lt;code&gt;0x4D&lt;/code&gt; and &lt;code&gt;0x5A&lt;/code&gt;, or &lt;code&gt;MZ&lt;/code&gt; in ASCII.&lt;/p&gt;
&lt;p&gt;The data structure of DOS Header (_IMAGE_DOS_HEADER) is listed as below:&lt;/p&gt;
&lt;p&gt;The important members of the structure are &lt;code&gt;e_magic&lt;/code&gt; and &lt;code&gt;e_lfanew&lt;/code&gt;, the former is used to store the magic number &lt;code&gt;MZ&lt;/code&gt; to file format recognition, the latter is a 4-byte value that store the offset to the start of the NT Header.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;e_lfanew&lt;/code&gt; is always located at an offset of &lt;code&gt;0x3C&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IMAGE_DOS_HEADER {      &lt;span style=&#34;color:#75715e&#34;&gt;// DOS .EXE header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_magic;                     &lt;span style=&#34;color:#75715e&#34;&gt;// Magic number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_cblp;                      &lt;span style=&#34;color:#75715e&#34;&gt;// Bytes on last page of file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_cp;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Pages in file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_crlc;                      &lt;span style=&#34;color:#75715e&#34;&gt;// Relocations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_cparhdr;                   &lt;span style=&#34;color:#75715e&#34;&gt;// Size of header in paragraphs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_minalloc;                  &lt;span style=&#34;color:#75715e&#34;&gt;// Minimum extra paragraphs needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_maxalloc;                  &lt;span style=&#34;color:#75715e&#34;&gt;// Maximum extra paragraphs needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_ss;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Initial (relative) SS value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_sp;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Initial SP value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_csum;                      &lt;span style=&#34;color:#75715e&#34;&gt;// Checksum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_ip;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Initial IP value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_cs;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Initial (relative) CS value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_lfarlc;                    &lt;span style=&#34;color:#75715e&#34;&gt;// File address of relocation table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_ovno;                      &lt;span style=&#34;color:#75715e&#34;&gt;// Overlay number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_res[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];                    &lt;span style=&#34;color:#75715e&#34;&gt;// Reserved words
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_oemid;                     &lt;span style=&#34;color:#75715e&#34;&gt;// OEM identifier (for e_oeminfo)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_oeminfo;                   &lt;span style=&#34;color:#75715e&#34;&gt;// OEM information; e_oemid specific
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    WORD   e_res2[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;// Reserved words
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    LONG   e_lfanew;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Offset to the NT header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  } IMAGE_DOS_HEADER, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIMAGE_DOS_HEADER;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dos-stub&#34;&gt;DOS Stub&lt;/h3&gt;
&lt;p&gt;This section is created for back compatibility, when executing the program in DOS mode, the error message &lt;code&gt;This program cannot be run in DOS mode&lt;/code&gt; is printed.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-tip&#34; data-lang=&#34;ad-tip&#34;&gt;The error message can be changed by the programmer at compile time.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;nt-header&#34;&gt;NT Header&lt;/h3&gt;
&lt;p&gt;The section starts with a signature, &lt;code&gt;PE&lt;/code&gt; is usually the string value of the signature.&lt;/p&gt;
&lt;p&gt;The data structure of NT Header varies with the machine&amp;rsquo;s architecture. The &lt;code&gt;OptionalHeader&lt;/code&gt; is the only difference between the two versions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 32-bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IMAGE_NT_HEADERS {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD                   Signature;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IMAGE_FILE_HEADER       FileHeader;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IMAGE_OPTIONAL_HEADER32 OptionalHeader;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} IMAGE_NT_HEADERS32, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIMAGE_NT_HEADERS32;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 64-bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IMAGE_NT_HEADERS64 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DWORD                   Signature;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IMAGE_FILE_HEADER       FileHeader;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} IMAGE_NT_HEADERS64, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIMAGE_NT_HEADERS64;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two headers that reside in NT Header
&lt;code&gt;FileHeader&lt;/code&gt; and &lt;code&gt;OptionalHeader&lt;/code&gt;, both of which include a large amount of information about the file.&lt;/p&gt;
&lt;h5 id=&#34;file-header&#34;&gt;File Header&lt;/h5&gt;
&lt;p&gt;Contains the following important information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumberOfSections&lt;/code&gt; - number of sections in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Characteristics&lt;/code&gt; - specify whether the file is a library of a console program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SizeOfOptionalHeader&lt;/code&gt; - the size of the following optional header&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;optional-header&#34;&gt;Optional Header&lt;/h5&gt;
&lt;p&gt;The size of optional header varies with the machine&amp;rsquo;s architecture&lt;/p&gt;
&lt;p&gt;Some members that use &lt;code&gt;DWORD&lt;/code&gt; as their data type on a 32-bit machine will use &lt;code&gt;ULONGLONG&lt;/code&gt; on a 64-bit machine instead.&lt;/p&gt;
&lt;p&gt;Contains the following critical members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Magic&lt;/code&gt; - describes whether the image is 32-bit or 64-bit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MajorOperatingSystemVersion&lt;/code&gt; - Required major operating system version (eg. 10, 11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MinorOperatingSystemVersion&lt;/code&gt; - Required minor operating system version (eg. 1511, 1507)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SizeOfCode&lt;/code&gt; - size of the &lt;code&gt;.text&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AddressOfEntryPoint&lt;/code&gt; - offset to the entry point of the file (eg. main)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BaseOfCode&lt;/code&gt; - offset to the &lt;code&gt;.text&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SizeOfImage&lt;/code&gt; -  size of the image in bytes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImageBase&lt;/code&gt; - the preferred address of how the application is to be loaded into memory. Due to ASLR, it is rarely realized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DataDirectory&lt;/code&gt; - an array of IMAGE_DATA_DIRECTORY, contains the directories in a PE file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-directories&#34;&gt;Data Directories&lt;/h3&gt;
&lt;p&gt;An important member in the optional header, an array of size 16 (IMAGE_NUMBEROF_DIRECTORY_ENTRIES)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IMAGE_DATA_DIRECTORY {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	DWORD VirtualAddress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	DWORD Size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} IMAGE_DATA_DIRECTORY, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIMAGE_DATA_DIRECTORY;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each entry includes some data about a PE section of a data table, the following is the corresponding information of each index&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IMAGE_DIRECTORY_ENTRY_EXPORT          &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Export Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_IMPORT          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Import Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_RESOURCE        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Resource Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_EXCEPTION       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Exception Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_SECURITY        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Security Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_BASERELOC       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Base Relocation Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_DEBUG           &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Debug Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Architecture Specific Data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_GLOBALPTR       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// RVA of GP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_TLS             &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// TLS Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Load Configuration Directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Bound Import Directory in headers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_IAT            &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Import Address Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Delay Load Import Descriptors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// COM Runtime descriptor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Export Directory&lt;/code&gt; and &lt;code&gt;Import Address Table&lt;/code&gt; are two interesting directories.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Export Directory&lt;/code&gt; - contains information about functions and variables that are exported from the executable. This directory is generally found in DLLs that export functions (eg. &lt;code&gt;kernel32.dll&lt;/code&gt; exporting &lt;code&gt;CreateFileA&lt;/code&gt;)
&lt;code&gt;Image Address Table&lt;/code&gt; - contains information about the addresses of functions that are imported from other executables. (eg. &lt;code&gt;app.exe&lt;/code&gt; importing &lt;code&gt;CreateFileA&lt;/code&gt; from &lt;code&gt;kernel32.dll&lt;/code&gt;)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-note&#34; data-lang=&#34;ad-note&#34;&gt;Hierarchy of the members

- NT Headers
	- Optional Header
		- Data Directories
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sections&#34;&gt;Sections&lt;/h3&gt;
&lt;p&gt;The number of sections in a PE file is dynamic, since the section can be added be a compiler or manually added later on. &lt;code&gt;IMAGE_FILE_HEADER.NumberOfSections&lt;/code&gt; helps determine the number.&lt;/p&gt;
&lt;p&gt;Common sections are listed as below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.text&lt;/code&gt; - contains executable codes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.data&lt;/code&gt; - contains initialized data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rdata&lt;/code&gt; - contains read only data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.idata&lt;/code&gt; - contains the import tables, used by PE loader to determine which DLL files need to be loaded to the process, along with the functions that are being used from each DLL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.reloc&lt;/code&gt; - contains information on how to fix up memory addresses.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rsrc&lt;/code&gt; - contains resources such as icons, bitmaps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each PE section has an &lt;code&gt;IMAGE_SECTION_HEADER&lt;/code&gt; data structure. These sections are saved under the NT headers, and are stacked up together.&lt;/p&gt;
&lt;p&gt;Each structure represents a section&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IMAGE_SECTION_HEADER {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DWORD PhysicalAddress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DWORD VirtualSize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } Misc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD VirtualAddress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD SizeOfRawData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD PointerToRawData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD PointerToRelocations;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD PointerToLinenumbers;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WORD  NumberOfRelocations;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WORD  NumberOfLinenumbers;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DWORD Characteristics;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} IMAGE_SECTION_HEADER, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PIMAGE_SECTION_HEADER;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt; - the name of the section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PhysicalAddress&lt;/code&gt; / &lt;code&gt;VirtualSize&lt;/code&gt; - the size of the section when it&amp;rsquo;s in memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VirtualAddress&lt;/code&gt; - offset of the start of the section in memory.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Arch Linux Installation</title>
      <link>https://blog.ydderf.dev/posts/arch-linux-installation/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ydderf.dev/posts/arch-linux-installation/</guid>
      <description>&lt;h1 id=&#34;arch-linux-installation&#34;&gt;Arch Linux Installation&lt;/h1&gt;
&lt;h5 id=&#34;install-targets&#34;&gt;install targets&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;base&lt;/li&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;linux-firmware&lt;/li&gt;
&lt;li&gt;vim (for editing files)&lt;/li&gt;
&lt;li&gt;man-db (for man pages)&lt;/li&gt;
&lt;li&gt;man-pages&lt;/li&gt;
&lt;li&gt;dhcpcd&lt;/li&gt;
&lt;li&gt;amd-ucode / intel-ucode ([[microcode]])&lt;/li&gt;
&lt;li&gt;lvm2 (for lvm partitions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;optional&#34;&gt;optional&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;base-devel&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if &lt;code&gt;dhcpcd&lt;/code&gt; is not installed, and arch is installed in an emulated environment
the newly installed operating system would not have network access
to get the network access back, the iso file that installed the operating system is needed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;fdisk -l&lt;/code&gt; to identify the &lt;code&gt;root partition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;mount /dev/sda3 /mnt&lt;/code&gt; to mount the &lt;code&gt;root partition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;(assuming the root partition is in &lt;code&gt;/dev/sda3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use mount &lt;code&gt;/dev/sda1 /mnt/boot&lt;/code&gt; to mount the &lt;code&gt;boot partition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;(assuming the boot partition is int `/dev/sda1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;swap on any swap partition if any exist using &lt;code&gt;swapon /dev/sda2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;arch-chroot /mnt&lt;/code&gt; into the system&lt;/li&gt;
&lt;li&gt;install the missing services using &lt;code&gt;pacman -S &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;</description>
      <content>&lt;h1 id=&#34;arch-linux-installation&#34;&gt;Arch Linux Installation&lt;/h1&gt;
&lt;h5 id=&#34;install-targets&#34;&gt;install targets&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;base&lt;/li&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;linux-firmware&lt;/li&gt;
&lt;li&gt;vim (for editing files)&lt;/li&gt;
&lt;li&gt;man-db (for man pages)&lt;/li&gt;
&lt;li&gt;man-pages&lt;/li&gt;
&lt;li&gt;dhcpcd&lt;/li&gt;
&lt;li&gt;amd-ucode / intel-ucode ([[microcode]])&lt;/li&gt;
&lt;li&gt;lvm2 (for lvm partitions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;optional&#34;&gt;optional&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;base-devel&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if &lt;code&gt;dhcpcd&lt;/code&gt; is not installed, and arch is installed in an emulated environment
the newly installed operating system would not have network access
to get the network access back, the iso file that installed the operating system is needed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;fdisk -l&lt;/code&gt; to identify the &lt;code&gt;root partition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;mount /dev/sda3 /mnt&lt;/code&gt; to mount the &lt;code&gt;root partition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;(assuming the root partition is in &lt;code&gt;/dev/sda3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use mount &lt;code&gt;/dev/sda1 /mnt/boot&lt;/code&gt; to mount the &lt;code&gt;boot partition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;(assuming the boot partition is int `/dev/sda1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;swap on any swap partition if any exist using &lt;code&gt;swapon /dev/sda2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;arch-chroot /mnt&lt;/code&gt; into the system&lt;/li&gt;
&lt;li&gt;install the missing services using &lt;code&gt;pacman -S &amp;lt;target&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>Windows DLL</title>
      <link>https://blog.ydderf.dev/posts/windows-dll/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ydderf.dev/posts/windows-dll/</guid>
      <description>&lt;h1 id=&#34;windows-dll&#34;&gt;Windows DLL&lt;/h1&gt;
&lt;p&gt;DLL is a shared library that is a module that cannot be executed directly, but needs to be loaded to use the exported functions.&lt;/p&gt;
&lt;h3 id=&#34;system-wide-dll-base-address&#34;&gt;System-wide DLL Base Address&lt;/h3&gt;
&lt;p&gt;For optimization purposes, some DLLs are loaded at the same base address in the virtual space of all processes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ydderf.dev/images/systemwidedll.png&#34; 
     alt=&#34;Image Description&#34; 
      
     data-zoomable&gt;
&lt;/p&gt;
&lt;h3 id=&#34;dll-entry-point&#34;&gt;DLL Entry Point&lt;/h3&gt;
&lt;p&gt;Since DLLs are loaded by executables, they can specify an entry point function that executes code when certain actions occur.&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;windows-dll&#34;&gt;Windows DLL&lt;/h1&gt;
&lt;p&gt;DLL is a shared library that is a module that cannot be executed directly, but needs to be loaded to use the exported functions.&lt;/p&gt;
&lt;h3 id=&#34;system-wide-dll-base-address&#34;&gt;System-wide DLL Base Address&lt;/h3&gt;
&lt;p&gt;For optimization purposes, some DLLs are loaded at the same base address in the virtual space of all processes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ydderf.dev/images/systemwidedll.png&#34; 
     alt=&#34;Image Description&#34; 
      
     data-zoomable&gt;
&lt;/p&gt;
&lt;h3 id=&#34;dll-entry-point&#34;&gt;DLL Entry Point&lt;/h3&gt;
&lt;p&gt;Since DLLs are loaded by executables, they can specify an entry point function that executes code when certain actions occur.&lt;/p&gt;
&lt;p&gt;There are 4 possibilities for the entry point being called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DLL_PROCESS_ATTACH&lt;/code&gt; - a process is loading the DLL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DLL_THREAD_ATTACH&lt;/code&gt; - a process is creating a new thread&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DLL_THREAD_DETACH&lt;/code&gt; - a thread exits normally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DLL_PROCESS_DETACH&lt;/code&gt; - a process unloads the DLL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exporting-a-function&#34;&gt;Exporting a Function&lt;/h3&gt;
&lt;p&gt;To export a function in a DLL, it must be declared by keywords &lt;code&gt;extern&lt;/code&gt; and &lt;code&gt;__declspec(dllexport)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__declspec&lt;/span&gt;(dllexport) &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hello&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MessageBoxA&lt;/span&gt;(NULL, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;, MB_ICONINFORMATION);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the function &lt;code&gt;Hello()&lt;/code&gt; can be called after the dll is loaded into memory&lt;/p&gt;
&lt;h3 id=&#34;dynamic-linking&#34;&gt;Dynamic Linking&lt;/h3&gt;
&lt;p&gt;Functions can be imported using &lt;code&gt;LoadLibrary&lt;/code&gt;, &lt;code&gt;GetModuleHandle&lt;/code&gt;, and &lt;code&gt;GetProcAddress&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;step-1---loading-a-dll&#34;&gt;Step 1 - Loading a DLL&lt;/h5&gt;
&lt;p&gt;The calling of Windows functions will make the process load the required DLLs in the beginning.&lt;/p&gt;
&lt;p&gt;Custom DLLs must be loaded manually with the functions mentioned before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	HMODULE hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLibraryA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dll1.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;step-2---retrieving-a-dlls-handle&#34;&gt;Step 2 - Retrieving a DLL&amp;rsquo;s Handle&lt;/h5&gt;
&lt;p&gt;If the target DLL had been loaded into the memory, the handle can be retrieved via &lt;code&gt;GetModuleHandleA&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	HMODULE hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dll1.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// if the dll has not been loaded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hModule &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLibraryA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dll1.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;step-3---retrieving-a-functions-address&#34;&gt;Step 3 - Retrieving a Function&amp;rsquo;s Address&lt;/h5&gt;
&lt;p&gt;After the DLL is loaded and the handle is retrieved, the target function&amp;rsquo;s address must be located.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	HMODULE hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dll1.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hModule &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLibraryA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dll1.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// pHelloWorld now stores the function&amp;#39;s address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	PVOID pHelloWorld &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetProcessAddress&lt;/span&gt;(hModule, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HelloWorld&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;step-4---type-casting-the-functions-address&#34;&gt;Step 4 - Type-casting The Function&amp;rsquo;s Address&lt;/h5&gt;
&lt;p&gt;The type-casting to the function pointer is required in order to conveniently invoke the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt; (WINAPI&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; HelloWorldfptr)();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	HMODULE hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetModuleHandleA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sampleDLL.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hModule &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// If the DLL is not loaded in memory, use LoadLibrary to load it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        hModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLibraryA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sampleDLL.dll&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PVOID pHelloWorld &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetProcAddress&lt;/span&gt;(hModule, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HelloWorld&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/// pHelloWorld stores HelloWorld&amp;#39;s function address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HelloWorldFunctionPointer HelloWorld &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HelloWorldFunctionPointer)pHelloWorld;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;putting-it-together&#34;&gt;Putting it Together&lt;/h3&gt;
&lt;p&gt;Another example for calling MessageBoxA.
The following assumes that &lt;code&gt;user32.dll&lt;/code&gt; is not automatically loaded into the memory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; (WINAPI&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; MessageBoxAFunctionPointer)(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	HWND    hWnd,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	LPCSTR  lpText,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	LPCSTR  lpCaption,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	UINT    uType
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MessageBoxAFunctionPointer pMessageBoxA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (MessageBoxAFunctionPointer)&lt;span style=&#34;color:#a6e22e&#34;&gt;GetProcessAddress&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLibraryA&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user32.dll&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MessageBoxA&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pMessageBoxA &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;pMessageBoxA&lt;/span&gt;(NULL, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;caption&amp;#34;&lt;/span&gt;, MB_OK);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-dlls-directly&#34;&gt;Running DLLs Directly&lt;/h3&gt;
&lt;p&gt;Another way to run the functions in a DLL is by &lt;code&gt;rundll32.exe&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rundll32.exe &amp;lt;dllname&amp;gt;,&amp;lt;target &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following example locks the machine via the function &lt;code&gt;LockWorkStation&lt;/code&gt; in &lt;code&gt;user32.dll&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rundll32.exe user32.dll,LockWorkStation
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Windows Process</title>
      <link>https://blog.ydderf.dev/posts/windows-process/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ydderf.dev/posts/windows-process/</guid>
      <description>&lt;h1 id=&#34;windows-process&#34;&gt;Windows Process&lt;/h1&gt;
&lt;h3 id=&#34;memory-types&#34;&gt;Memory Types&lt;/h3&gt;
&lt;p&gt;A process can have 3 different types of memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Private memory&lt;/code&gt; - dedicated to a single process, not shared by other processes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mapped memory&lt;/code&gt; - can be shared between multiple processes, examples: shared libraries, shared memory segments, and shared files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Image memory&lt;/code&gt; - contains code and data of an executable file. used to store the code and data that is used by the process. often related to ==DLL files== loaded into a process&amp;rsquo;s address space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;process-environment-block-peb&#34;&gt;Process Environment Block (PEB)&lt;/h3&gt;
&lt;p&gt;Contains information about a process, such as its&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;windows-process&#34;&gt;Windows Process&lt;/h1&gt;
&lt;h3 id=&#34;memory-types&#34;&gt;Memory Types&lt;/h3&gt;
&lt;p&gt;A process can have 3 different types of memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Private memory&lt;/code&gt; - dedicated to a single process, not shared by other processes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mapped memory&lt;/code&gt; - can be shared between multiple processes, examples: shared libraries, shared memory segments, and shared files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Image memory&lt;/code&gt; - contains code and data of an executable file. used to store the code and data that is used by the process. often related to ==DLL files== loaded into a process&amp;rsquo;s address space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;process-environment-block-peb&#34;&gt;Process Environment Block (PEB)&lt;/h3&gt;
&lt;p&gt;Contains information about a process, such as its&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Startup information&lt;/li&gt;
&lt;li&gt;Allocated heap&lt;/li&gt;
&lt;li&gt;Loaded DLLs&lt;/li&gt;
&lt;li&gt;Process ID&lt;/li&gt;
&lt;li&gt;Path to the executable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Used by the operating system to store information about the process, and by the Windows loader to launch applications.&lt;/p&gt;
&lt;h5 id=&#34;peb-structure&#34;&gt;PEB Structure&lt;/h5&gt;
&lt;p&gt;Important members are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[[#BeingDebugged]]&lt;/li&gt;
&lt;li&gt;[[#Ldr]]&lt;/li&gt;
&lt;li&gt;[[#ProcessParameters]]&lt;/li&gt;
&lt;li&gt;[[#AtlThunkSListPtr &amp;amp; AtlThunkSListPtr32]]&lt;/li&gt;
&lt;li&gt;[[#PostProcessInitRoutine]]&lt;/li&gt;
&lt;li&gt;[[#SessionId]]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _PEB {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE                          Reserved1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE                          BeingDebugged;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE                          Reserved2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved3[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PPEB_LDR_DATA                 Ldr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved4[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         AtlThunkSListPtr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved5;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ULONG                         Reserved6;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved7;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ULONG                         Reserved8;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ULONG                         AtlThunkSListPtr32;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved9[&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE                          Reserved10[&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE                          Reserved11[&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID                         Reserved12[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ULONG                         SessionId;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} PEB, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PPEB;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;beingdebugged&#34;&gt;BeingDebugged&lt;/h5&gt;
&lt;p&gt;Set to 1 if the process is being debugged.&lt;/p&gt;
&lt;p&gt;Used by the Windows loader to determine whether to launch the application with a debugger attached or not.&lt;/p&gt;
&lt;h5 id=&#34;ldr&#34;&gt;Ldr&lt;/h5&gt;
&lt;p&gt;A pointer to a &lt;code&gt;PEB_LDR_DATA&lt;/code&gt; structure in the &lt;code&gt;PEB&lt;/code&gt;
The structure contains information about the process&amp;rsquo;s loaded dynamic link library modules.&lt;/p&gt;
&lt;p&gt;It includes a list of DLLs loaded in the process, which is used by the Windows loader to keep track of DLLs loaded in the process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _PEB_LDR_DATA {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE       Reserved1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID      Reserved2[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LIST_ENTRY InMemoryOrderModuleList;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} PEB_LDR_DATA, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PPEB_LDR_DATA;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-tip&#34; data-lang=&#34;ad-tip&#34;&gt;`Ldr` can be leveraged to find the base address of a particular DLL, which can be used to build a ==custom version of GetModuleHandleA/W== to stay stealthy
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;processparameters&#34;&gt;ProcessParameters&lt;/h5&gt;
&lt;p&gt;A pointer to the &lt;code&gt;PTL_USER_PROCESS_PARAMETERS&lt;/code&gt; structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _RTL_USER_PROCESS_PARAMETERS {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE           Reserved1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID          Reserved2[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UNICODE_STRING ImagePathName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UNICODE_STRING CommandLine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} RTL_USER_PROCESS_PARAMETERS, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PRTL_USER_PROCESS_PARAMETERS;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Contains command lines parameters passed to the process when created.&lt;/p&gt;
&lt;p&gt;The parameters are added to the PEB by the Windows loader.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-tip&#34; data-lang=&#34;ad-tip&#34;&gt;`ProcessParameters` can be leveraged to perform ==command line spoofing==
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;atlthunkslistptr--atlthunkslistptr32&#34;&gt;AtlThunkSListPtr &amp;amp; AtlThunkSListPtr32&lt;/h5&gt;
&lt;p&gt;Used by the ATL (Active Template Library) to store a pointer to a linked list of thunking functions.&lt;/p&gt;
&lt;p&gt;Thunking functions are used to call functions that are implemented in a different address space, often represent functions exported from a DLL&lt;/p&gt;
&lt;h5 id=&#34;postprocessinitroutine&#34;&gt;PostProcessInitRoutine&lt;/h5&gt;
&lt;p&gt;Used to store a pointer to a function called by the operating system after TLS (Thread Local Storage) initialization has been completed for all threads in the process.&lt;/p&gt;
&lt;p&gt;This function can also be used to perform additional initialization tasks required by the process.&lt;/p&gt;
&lt;h5 id=&#34;sessionid&#34;&gt;SessionId&lt;/h5&gt;
&lt;p&gt;A identifier of a single session used for tracking the activity of the user during the session.&lt;/p&gt;
&lt;h3 id=&#34;teb-structure&#34;&gt;TEB Structure&lt;/h3&gt;
&lt;p&gt;The import members in TEB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[[#Process Environment Block (PEB)]]&lt;/li&gt;
&lt;li&gt;[[#TlsSlots]]&lt;/li&gt;
&lt;li&gt;[[#TlsExpansionSlots]]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _TEB {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID Reserved1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PPEB  ProcessEnvironmentBlock;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID Reserved2[&lt;span style=&#34;color:#ae81ff&#34;&gt;399&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE  Reserved3[&lt;span style=&#34;color:#ae81ff&#34;&gt;1952&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID TlsSlots[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BYTE  Reserved4[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID Reserved5[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID ReservedForOle;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID Reserved6[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PVOID TlsExpansionSlots;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} TEB, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;PTEB;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;processenvironmentblock&#34;&gt;ProcessEnvironmentBlock&lt;/h5&gt;
&lt;p&gt;PEB as described above, stores information about the currently running process.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-note&#34; data-lang=&#34;ad-note&#34;&gt;Processes stands at a higher level in the hierarchy than threads.  
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;tlsslots&#34;&gt;TlsSlots&lt;/h5&gt;
&lt;p&gt;Thread local storage is used to store thread-specific data. Each thread has its own TEB with a set of TLS slots.&lt;/p&gt;
&lt;p&gt;Thread-specific variables, thread-specific handles, and thread-specific states may be stored in the TLS slot.&lt;/p&gt;
&lt;h5 id=&#34;tlsexpansionslots&#34;&gt;TlsExpansionSlots&lt;/h5&gt;
&lt;p&gt;The expansion slots are a set of pointers used to store thread-local storage data for a thread. often reserved for use by system DLLs.&lt;/p&gt;
&lt;h3 id=&#34;process--thread-handles&#34;&gt;Process / Thread Handles&lt;/h3&gt;
&lt;p&gt;Each process / thread has its own unique identifier. One can use these identifiers to get the handle of a process or a thread by &lt;code&gt;OpenProcess&lt;/code&gt; or &lt;code&gt;OpenThread&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-note&#34; data-lang=&#34;ad-note&#34;&gt;To avoid handle-leaking, every opened handle should be closed by `CloseHandle` once their use is no longer required.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
</content>
    </item>
    
  </channel>
</rss>
